// -*- Java -*- This Cup file was machine-generated by BNFC
package CPP;

parser code {:
  public CPP.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (CPP.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal CPP.Absyn.Program Program;
nonterminal CPP.Absyn.Main Main;
nonterminal CPP.Absyn.Def Def;
nonterminal CPP.Absyn.ListDef ListDef;
nonterminal CPP.Absyn.ListIdent ListIdent;
nonterminal CPP.Absyn.Exp Exp3;
nonterminal CPP.Absyn.Exp Exp2;
nonterminal CPP.Absyn.Exp Exp1;
nonterminal CPP.Absyn.Exp Exp;

terminal _SYMB_0;    //   =
terminal _SYMB_1;    //   ;
terminal _SYMB_2;    //   +
terminal _SYMB_3;    //   -
terminal _SYMB_4;    //   <
terminal _SYMB_5;    //   \
terminal _SYMB_6;    //   ->
terminal _SYMB_7;    //   (
terminal _SYMB_8;    //   )
terminal _SYMB_9;    //   else
terminal _SYMB_10;    //   if
terminal _SYMB_11;    //   main
terminal _SYMB_12;    //   print
terminal _SYMB_13;    //   then



terminal Integer _INTEGER_;

terminal String _IDENT_;



start with Program;


Program ::= ListDef:p_1 Main:p_2  {: RESULT = new CPP.Absyn.Prog(p_1,p_2); :} 
;
Main ::= _SYMB_11 _SYMB_0 _SYMB_12 Exp3:p_4 _SYMB_1  {: RESULT = new CPP.Absyn.DMain(p_4); :} 
;
Def ::= _IDENT_:p_1 ListIdent:p_2 _SYMB_0 Exp:p_4  {: RESULT = new CPP.Absyn.DDef(p_1,p_2,p_4); :} 
;
ListDef ::=  /* empty */  {: RESULT = new CPP.Absyn.ListDef(); :} 
  | ListDef:p_1 Def:p_2 _SYMB_1  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ListIdent ::=  /* empty */  {: RESULT = new CPP.Absyn.ListIdent(); :} 
  | _IDENT_:p_1 ListIdent:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
Exp3 ::= _IDENT_:p_1  {: RESULT = new CPP.Absyn.EVar(p_1); :} 
  | _INTEGER_:p_1  {: RESULT = new CPP.Absyn.EInt(p_1); :}
  | _SYMB_7 Exp:p_2 _SYMB_8  {: RESULT = p_2; :}
;
Exp2 ::= Exp2:p_1 Exp3:p_2  {: RESULT = new CPP.Absyn.EApp(p_1,p_2); :} 
  | Exp3:p_1  {: RESULT = p_1; :}
;
Exp1 ::= Exp1:p_1 _SYMB_2 Exp2:p_3  {: RESULT = new CPP.Absyn.EAdd(p_1,p_3); :} 
  | Exp1:p_1 _SYMB_3 Exp2:p_3  {: RESULT = new CPP.Absyn.ESub(p_1,p_3); :}
  | Exp1:p_1 _SYMB_4 Exp2:p_3  {: RESULT = new CPP.Absyn.ELt(p_1,p_3); :}
  | Exp2:p_1  {: RESULT = p_1; :}
;
Exp ::= _SYMB_10 Exp1:p_2 _SYMB_13 Exp1:p_4 _SYMB_9 Exp:p_6  {: RESULT = new CPP.Absyn.EIf(p_2,p_4,p_6); :} 
  | _SYMB_5 _IDENT_:p_2 _SYMB_6 Exp:p_4  {: RESULT = new CPP.Absyn.EAbs(p_2,p_4); :}
  | Exp1:p_1  {: RESULT = p_1; :}
;

